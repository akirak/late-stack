/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as BlogRouteRouteImport } from './routes/_blog/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AboutIndexRouteImport } from './routes/about.index'
import { Route as AboutLangRouteImport } from './routes/about.$lang'
import { Route as BlogArchiveRouteRouteImport } from './routes/_blog/_archive.route'
import { Route as BlogArchivePostIndexRouteImport } from './routes/_blog/_archive.post.index'
import { Route as BlogPostLangSlugRouteImport } from './routes/_blog/post.$lang.$slug'
import { Route as BlogArchivePostLangIndexRouteImport } from './routes/_blog/_archive.post.$lang.index'

const BlogRouteRoute = BlogRouteRouteImport.update({
  id: '/_blog',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutIndexRoute = AboutIndexRouteImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutLangRoute = AboutLangRouteImport.update({
  id: '/about/$lang',
  path: '/about/$lang',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogArchiveRouteRoute = BlogArchiveRouteRouteImport.update({
  id: '/_archive',
  getParentRoute: () => BlogRouteRoute,
} as any)
const BlogArchivePostIndexRoute = BlogArchivePostIndexRouteImport.update({
  id: '/post/',
  path: '/post/',
  getParentRoute: () => BlogArchiveRouteRoute,
} as any)
const BlogPostLangSlugRoute = BlogPostLangSlugRouteImport.update({
  id: '/post/$lang/$slug',
  path: '/post/$lang/$slug',
  getParentRoute: () => BlogRouteRoute,
} as any)
const BlogArchivePostLangIndexRoute =
  BlogArchivePostLangIndexRouteImport.update({
    id: '/post/$lang/',
    path: '/post/$lang/',
    getParentRoute: () => BlogArchiveRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about/$lang': typeof AboutLangRoute
  '/about': typeof AboutIndexRoute
  '/post/$lang/$slug': typeof BlogPostLangSlugRoute
  '/post': typeof BlogArchivePostIndexRoute
  '/post/$lang': typeof BlogArchivePostLangIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about/$lang': typeof AboutLangRoute
  '/about': typeof AboutIndexRoute
  '/post/$lang/$slug': typeof BlogPostLangSlugRoute
  '/post': typeof BlogArchivePostIndexRoute
  '/post/$lang': typeof BlogArchivePostLangIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_blog': typeof BlogRouteRouteWithChildren
  '/_blog/_archive': typeof BlogArchiveRouteRouteWithChildren
  '/about/$lang': typeof AboutLangRoute
  '/about/': typeof AboutIndexRoute
  '/_blog/post/$lang/$slug': typeof BlogPostLangSlugRoute
  '/_blog/_archive/post/': typeof BlogArchivePostIndexRoute
  '/_blog/_archive/post/$lang/': typeof BlogArchivePostLangIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about/$lang'
    | '/about'
    | '/post/$lang/$slug'
    | '/post'
    | '/post/$lang'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about/$lang'
    | '/about'
    | '/post/$lang/$slug'
    | '/post'
    | '/post/$lang'
  id:
    | '__root__'
    | '/'
    | '/_blog'
    | '/_blog/_archive'
    | '/about/$lang'
    | '/about/'
    | '/_blog/post/$lang/$slug'
    | '/_blog/_archive/post/'
    | '/_blog/_archive/post/$lang/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlogRouteRoute: typeof BlogRouteRouteWithChildren
  AboutLangRoute: typeof AboutLangRoute
  AboutIndexRoute: typeof AboutIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_blog': {
      id: '/_blog'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof BlogRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about/$lang': {
      id: '/about/$lang'
      path: '/about/$lang'
      fullPath: '/about/$lang'
      preLoaderRoute: typeof AboutLangRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_blog/_archive': {
      id: '/_blog/_archive'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof BlogArchiveRouteRouteImport
      parentRoute: typeof BlogRouteRoute
    }
    '/_blog/_archive/post/': {
      id: '/_blog/_archive/post/'
      path: '/post'
      fullPath: '/post'
      preLoaderRoute: typeof BlogArchivePostIndexRouteImport
      parentRoute: typeof BlogArchiveRouteRoute
    }
    '/_blog/post/$lang/$slug': {
      id: '/_blog/post/$lang/$slug'
      path: '/post/$lang/$slug'
      fullPath: '/post/$lang/$slug'
      preLoaderRoute: typeof BlogPostLangSlugRouteImport
      parentRoute: typeof BlogRouteRoute
    }
    '/_blog/_archive/post/$lang/': {
      id: '/_blog/_archive/post/$lang/'
      path: '/post/$lang'
      fullPath: '/post/$lang'
      preLoaderRoute: typeof BlogArchivePostLangIndexRouteImport
      parentRoute: typeof BlogArchiveRouteRoute
    }
  }
}

interface BlogArchiveRouteRouteChildren {
  BlogArchivePostIndexRoute: typeof BlogArchivePostIndexRoute
  BlogArchivePostLangIndexRoute: typeof BlogArchivePostLangIndexRoute
}

const BlogArchiveRouteRouteChildren: BlogArchiveRouteRouteChildren = {
  BlogArchivePostIndexRoute: BlogArchivePostIndexRoute,
  BlogArchivePostLangIndexRoute: BlogArchivePostLangIndexRoute,
}

const BlogArchiveRouteRouteWithChildren =
  BlogArchiveRouteRoute._addFileChildren(BlogArchiveRouteRouteChildren)

interface BlogRouteRouteChildren {
  BlogArchiveRouteRoute: typeof BlogArchiveRouteRouteWithChildren
  BlogPostLangSlugRoute: typeof BlogPostLangSlugRoute
}

const BlogRouteRouteChildren: BlogRouteRouteChildren = {
  BlogArchiveRouteRoute: BlogArchiveRouteRouteWithChildren,
  BlogPostLangSlugRoute: BlogPostLangSlugRoute,
}

const BlogRouteRouteWithChildren = BlogRouteRoute._addFileChildren(
  BlogRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlogRouteRoute: BlogRouteRouteWithChildren,
  AboutLangRoute: AboutLangRoute,
  AboutIndexRoute: AboutIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
