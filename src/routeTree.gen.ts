/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as BlogRouteRouteImport } from './routes/_blog/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AboutIndexRouteImport } from './routes/about.index'
import { Route as AboutLangRouteImport } from './routes/about.$lang'
import { Route as BlogArchiveRouteRouteImport } from './routes/_blog/_archive.route'
import { Route as BlogArchivePostsIndexRouteImport } from './routes/_blog/_archive.posts.index'
import { Route as BlogPostsLangSlugRouteImport } from './routes/_blog/posts.$lang.$slug'
import { Route as BlogArchivePostsLangIndexRouteImport } from './routes/_blog/_archive.posts.$lang.index'
import { ServerRoute as SitemapDotxmlServerRouteImport } from './routes/sitemap[.]xml'
import { ServerRoute as OembedEmbedIdServerRouteImport } from './routes/oembed.$embedId'
import { ServerRoute as FeedsDefaultDotxmlServerRouteImport } from './routes/feeds.default[.]xml'

const rootServerRouteImport = createServerRootRoute()

const BlogRouteRoute = BlogRouteRouteImport.update({
  id: '/_blog',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutIndexRoute = AboutIndexRouteImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutLangRoute = AboutLangRouteImport.update({
  id: '/about/$lang',
  path: '/about/$lang',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogArchiveRouteRoute = BlogArchiveRouteRouteImport.update({
  id: '/_archive',
  getParentRoute: () => BlogRouteRoute,
} as any)
const BlogArchivePostsIndexRoute = BlogArchivePostsIndexRouteImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => BlogArchiveRouteRoute,
} as any)
const BlogPostsLangSlugRoute = BlogPostsLangSlugRouteImport.update({
  id: '/posts/$lang/$slug',
  path: '/posts/$lang/$slug',
  getParentRoute: () => BlogRouteRoute,
} as any)
const BlogArchivePostsLangIndexRoute =
  BlogArchivePostsLangIndexRouteImport.update({
    id: '/posts/$lang/',
    path: '/posts/$lang/',
    getParentRoute: () => BlogArchiveRouteRoute,
  } as any)
const SitemapDotxmlServerRoute = SitemapDotxmlServerRouteImport.update({
  id: '/sitemap.xml',
  path: '/sitemap.xml',
  getParentRoute: () => rootServerRouteImport,
} as any)
const OembedEmbedIdServerRoute = OembedEmbedIdServerRouteImport.update({
  id: '/oembed/$embedId',
  path: '/oembed/$embedId',
  getParentRoute: () => rootServerRouteImport,
} as any)
const FeedsDefaultDotxmlServerRoute =
  FeedsDefaultDotxmlServerRouteImport.update({
    id: '/feeds/default.xml',
    path: '/feeds/default.xml',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about/$lang': typeof AboutLangRoute
  '/about': typeof AboutIndexRoute
  '/posts/$lang/$slug': typeof BlogPostsLangSlugRoute
  '/posts': typeof BlogArchivePostsIndexRoute
  '/posts/$lang': typeof BlogArchivePostsLangIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about/$lang': typeof AboutLangRoute
  '/about': typeof AboutIndexRoute
  '/posts/$lang/$slug': typeof BlogPostsLangSlugRoute
  '/posts': typeof BlogArchivePostsIndexRoute
  '/posts/$lang': typeof BlogArchivePostsLangIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_blog': typeof BlogRouteRouteWithChildren
  '/_blog/_archive': typeof BlogArchiveRouteRouteWithChildren
  '/about/$lang': typeof AboutLangRoute
  '/about/': typeof AboutIndexRoute
  '/_blog/posts/$lang/$slug': typeof BlogPostsLangSlugRoute
  '/_blog/_archive/posts/': typeof BlogArchivePostsIndexRoute
  '/_blog/_archive/posts/$lang/': typeof BlogArchivePostsLangIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about/$lang'
    | '/about'
    | '/posts/$lang/$slug'
    | '/posts'
    | '/posts/$lang'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about/$lang'
    | '/about'
    | '/posts/$lang/$slug'
    | '/posts'
    | '/posts/$lang'
  id:
    | '__root__'
    | '/'
    | '/_blog'
    | '/_blog/_archive'
    | '/about/$lang'
    | '/about/'
    | '/_blog/posts/$lang/$slug'
    | '/_blog/_archive/posts/'
    | '/_blog/_archive/posts/$lang/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlogRouteRoute: typeof BlogRouteRouteWithChildren
  AboutLangRoute: typeof AboutLangRoute
  AboutIndexRoute: typeof AboutIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
  '/feeds/default.xml': typeof FeedsDefaultDotxmlServerRoute
  '/oembed/$embedId': typeof OembedEmbedIdServerRoute
}
export interface FileServerRoutesByTo {
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
  '/feeds/default.xml': typeof FeedsDefaultDotxmlServerRoute
  '/oembed/$embedId': typeof OembedEmbedIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
  '/feeds/default.xml': typeof FeedsDefaultDotxmlServerRoute
  '/oembed/$embedId': typeof OembedEmbedIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/sitemap.xml' | '/feeds/default.xml' | '/oembed/$embedId'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/sitemap.xml' | '/feeds/default.xml' | '/oembed/$embedId'
  id: '__root__' | '/sitemap.xml' | '/feeds/default.xml' | '/oembed/$embedId'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  SitemapDotxmlServerRoute: typeof SitemapDotxmlServerRoute
  FeedsDefaultDotxmlServerRoute: typeof FeedsDefaultDotxmlServerRoute
  OembedEmbedIdServerRoute: typeof OembedEmbedIdServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_blog': {
      id: '/_blog'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof BlogRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about/$lang': {
      id: '/about/$lang'
      path: '/about/$lang'
      fullPath: '/about/$lang'
      preLoaderRoute: typeof AboutLangRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_blog/_archive': {
      id: '/_blog/_archive'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof BlogArchiveRouteRouteImport
      parentRoute: typeof BlogRouteRoute
    }
    '/_blog/_archive/posts/': {
      id: '/_blog/_archive/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof BlogArchivePostsIndexRouteImport
      parentRoute: typeof BlogArchiveRouteRoute
    }
    '/_blog/posts/$lang/$slug': {
      id: '/_blog/posts/$lang/$slug'
      path: '/posts/$lang/$slug'
      fullPath: '/posts/$lang/$slug'
      preLoaderRoute: typeof BlogPostsLangSlugRouteImport
      parentRoute: typeof BlogRouteRoute
    }
    '/_blog/_archive/posts/$lang/': {
      id: '/_blog/_archive/posts/$lang/'
      path: '/posts/$lang'
      fullPath: '/posts/$lang'
      preLoaderRoute: typeof BlogArchivePostsLangIndexRouteImport
      parentRoute: typeof BlogArchiveRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/sitemap.xml': {
      id: '/sitemap.xml'
      path: '/sitemap.xml'
      fullPath: '/sitemap.xml'
      preLoaderRoute: typeof SitemapDotxmlServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/oembed/$embedId': {
      id: '/oembed/$embedId'
      path: '/oembed/$embedId'
      fullPath: '/oembed/$embedId'
      preLoaderRoute: typeof OembedEmbedIdServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/feeds/default.xml': {
      id: '/feeds/default.xml'
      path: '/feeds/default.xml'
      fullPath: '/feeds/default.xml'
      preLoaderRoute: typeof FeedsDefaultDotxmlServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface BlogArchiveRouteRouteChildren {
  BlogArchivePostsIndexRoute: typeof BlogArchivePostsIndexRoute
  BlogArchivePostsLangIndexRoute: typeof BlogArchivePostsLangIndexRoute
}

const BlogArchiveRouteRouteChildren: BlogArchiveRouteRouteChildren = {
  BlogArchivePostsIndexRoute: BlogArchivePostsIndexRoute,
  BlogArchivePostsLangIndexRoute: BlogArchivePostsLangIndexRoute,
}

const BlogArchiveRouteRouteWithChildren =
  BlogArchiveRouteRoute._addFileChildren(BlogArchiveRouteRouteChildren)

interface BlogRouteRouteChildren {
  BlogArchiveRouteRoute: typeof BlogArchiveRouteRouteWithChildren
  BlogPostsLangSlugRoute: typeof BlogPostsLangSlugRoute
}

const BlogRouteRouteChildren: BlogRouteRouteChildren = {
  BlogArchiveRouteRoute: BlogArchiveRouteRouteWithChildren,
  BlogPostsLangSlugRoute: BlogPostsLangSlugRoute,
}

const BlogRouteRouteWithChildren = BlogRouteRoute._addFileChildren(
  BlogRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlogRouteRoute: BlogRouteRouteWithChildren,
  AboutLangRoute: AboutLangRoute,
  AboutIndexRoute: AboutIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  SitemapDotxmlServerRoute: SitemapDotxmlServerRoute,
  FeedsDefaultDotxmlServerRoute: FeedsDefaultDotxmlServerRoute,
  OembedEmbedIdServerRoute: OembedEmbedIdServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
